@using Kendo.Mvc.UI
@{
    ViewBag.Title = "PopUp Demo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>PopUpDemo <a href="@Url.Action("Index","Home")">Phase 1</a></h2>

@(Html.Kendo().Grid<KendoUIApp.Models.ProductModel>()
            .Name("grid")            
            .Columns(columns =>
            {
                columns.Template(@<text></text>).ClientTemplate("<input type='checkbox' class='checkbox' id='chkSelect_#= ProductId#' userId='#= ProductId#' />").Width(50);
                columns.Bound(product => product.ProductCategory.ProductCategoryId).EditorTemplateName("CategoryList").Title("Product Category").ClientTemplate("#:ProductCategory.ProductCategoryName#");
                columns.Bound(product => product.ProductName);
                columns.Bound(product => product.UnitsInStock);
                columns.Bound(product => product.UnitPrice);
                columns.Command(command =>
                {
                    command.Destroy();
                }).Width(250);
            })
            .ToolBar(toolbar =>
            {                
                toolbar.Template(@<text>
                   @item.SaveButton()

                   @(Html.Kendo().Button()
                    .Name("batchProdCatEditor")
                    .HtmlAttributes(new { type = "k-button" })
                    .Icon("settings")
                    .Content("Product Category Batch Update")
                    .Events(x => x.Click("openWindow")))

                    @(Html.Kendo().Button()
                    .Name("batchEditor")
                    .HtmlAttributes(new { type = "k-button" })
                    .Icon("settings")
                    .Content("Batch Editor")
                    .Events(x => x.Click("batchEditor")))
                </text>);
                
            })
            .Editable(editable => editable.Mode(GridEditMode.InCell))
            .Scrollable()
            .HtmlAttributes(new { style = "height:500px;" })
            .DataSource(dataSource => dataSource
         .Ajax()
         .ServerOperation(false)
         .Batch(true)         
         .Events(events => events.Error("error_handler"))
         .Model(model =>
         {
             model.Id(product => product.ProductId);
             model.Field(product => product.ProductId).Editable(false);
             model.Field(product => product.ProductCategory).DefaultValue(ViewBag.defaultCategory as KendoUIApp.Models.ProductCategoryModel);
         })
         .Read(read => read.Action("Products_Read", "Home"))
         .Update(update => update.Action("Products_Update", "Home"))
         .Destroy(update => update.Action("Products_Destroy", "Home"))
    )
)

@(Html.Kendo().Window()
.Name("myWindow") //The name of the window is mandatory. It specifies the "id" attribute of the widget.
.Title("Batch Operations") //set the title of the window
.LoadContentFrom("PopupDataForm", "Home",new { ids="Test"})
.Draggable() //Enable dragging of the window
.Resizable() //Enable resizing of the window
.Width(600) //Set width of the window
.Modal(true)
.Visible(false)
.Events(events => events
         .Close("resetProductGrid")
)
)


<div id="externalEditor" data-role="window" style="display: none" data-visible="true">
</div>


<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    var checkedIds = {};
  
    $(function () {
        $('#grid').on('click', '.checkbox', function () {
            var checked = $(this).is(':checked');
            var grid = $('#grid').data().kendoGrid;
            var row = $(this).closest("tr");
            var dataItem = grid.dataItem(row);
            checkedIds[dataItem.id] = checked;
            if (checked) {
                //-select the row
                row.addClass("k-state-selected");
            } else {
                //-remove selection
                row.removeClass("k-state-selected");
            }
        })
    })

    function openWindow() {
        var checkedRow = [];
        for (var i in checkedIds) {
            if (checkedIds[i]) {
                checkedRow.push(i);
            }
        }
        var wdw = $("#myWindow").data("kendoWindow"); //get the Window widget's instance  
        wdw.refresh({
            url: "../Home/PopupDataForm",
            type: "POST",
            data: { prodIds: checkedRow }
        });
        wdw.center();
        wdw.open();  //and call its open method
    }

    function batchEditor() {
        if ($('#externalEditor').html().length === 1)
            createEditor();
        kendo.bind($('#externalEditor'));
        $("#btnApply").kendoButton({ "click": changeApply, "icon": "settings" });
        var wdw = $('#externalEditor').data('kendoWindow').open();        
        wdw.title("Batch Editor");
        wdw.setOptions({
            width: 350,
            height: 220
        });
        wdw.center();
        wdw.open();  //and call its open method
    }

    function changeApply() {
        var grid = $("#grid").data().kendoGrid;
        var columns = grid.options.columns;
        var data = grid._data;
        for (var i in checkedIds) {
            for (var j = 0; j < columns.length; j++) {
                if (columns[j].encoded) {
                    var proprtyField = columns[j].field.replace('.', '_');
                     
                    // drop down case
                    if (columns[j].title === 'Product Category') {
                        var record = $("#externalEditor").find("#" + proprtyField).data("kendoDropDownList").dataItem();
                        if (checkedIds[i] && record != "" && record.ProductCategoryId>0) {
                            var dt = data[i - 1];
                            dt["ProductCategory"].ProductCategoryId = record.ProductCategoryId;
                            dt["ProductCategory"].ProductCategoryName = record.ProductCategoryName;
                            dt.dirty = true;
                            grid._modelChange({ model: dt });
                        }
                    } else {
                       // input field case
                        var obj = $("#externalEditor").find("input[name=" + proprtyField + "]");
                        var record = obj.val();
                        if (checkedIds[i] && record != "") {
                            var dt = data[i - 1];
                            dt[proprtyField] = record;
                            dt.dirty = true;
                            grid._modelChange({ model: dt });
                        }
                    }
                }
            }
        }
        checkedIds = [];
    }

    function resetProductGrid() {        
        $("#grid").data().kendoGrid.dataSource.read();
    }

    function createEditor() {
        var grid = $("#grid").data().kendoGrid;
        var columns = grid.options.columns;
        var table = $('<table></table>');
        for (var j = 0; j < columns.length; j++) {
            if (columns[j].encoded) {
                var clmn = columns[j];
                var row = $('<tr></tr>');
                var field = clmn.field.replace('.', '_');
                var rowData1 = $('<td></td>').text(clmn.title);
                var rowData2 = $('<td></td>');
                rowData2.html(clmn.editor);
                row.append(rowData1);
                row.append(rowData2);
                table.append(row);
            }
        }
        var row = $('<tr></tr>');
        var rowDataBtn = $('<td></td>')
        rowDataBtn.html('<button id="btnApply" type="k-button" data-role="button" class="k-button k-button-icontext" role="button" aria-disabled="false" tabindex="0"><span class="k-icon k-i-settings"></span>Apply</button>');
        row.append(rowDataBtn);
        table.append(row);
        $('#externalEditor').html(table);
    }
   
</script>
