@using Kendo.Mvc.UI
@{
    ViewBag.Title = "PopUp Demo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>PopUpDemo <a href="@Url.Action("Index","Home")">Phase 1</a></h2>

@(Html.Kendo().Grid<KendoUIApp.Models.ProductModel>()
            .Name("grid")            
            .Columns(columns =>
            {
                columns.Template(@<text></text>).ClientTemplate("<input type='checkbox' class='checkbox' id='chkSelect_#= ProductId#' userId='#= ProductId#' />").Width(50);
                columns.Bound(product => product.ProductCategory.ProductCategoryId).EditorTemplateName("CategoryList").Title("Product Category").ClientTemplate("#:ProductCategory.ProductCategoryName#");
                columns.Bound(product => product.ProductName);
                columns.Bound(product => product.UnitsInStock);
                columns.Bound(product => product.UnitPrice);
                columns.Command(command =>
                {                  
                    command.Destroy();
                }).Width(250);

            })                        
            .Scrollable()
            .HtmlAttributes(new { style = "height:500px;" })
            .DataSource(dataSource => dataSource
         .Ajax()
         .ServerOperation(false)
         .Events(events => events.Error("error_handler"))
         .Model(model =>
         {
             model.Id(product => product.ProductId);
             model.Field(product => product.ProductId).Editable(false);
             model.Field(product => product.ProductCategory).DefaultValue(ViewBag.defaultCategory as KendoUIApp.Models.ProductCategoryModel);
         })
         .Read(read => read.Action("Products_Read", "Home"))
         .Destroy(update => update.Action("Products_Destroy", "Home"))
    )
)

@(Html.Kendo().Window()
.Name("myWindow") //The name of the window is mandatory. It specifies the "id" attribute of the widget.
.Title("Batch Operations") //set the title of the window
.LoadContentFrom("PopupDataForm", "Home",new { ids="Test"})
.Draggable() //Enable dragging of the window
.Resizable() //Enable resizing of the window
.Width(600) //Set width of the window
.Modal(true)
.Visible(false)
.Events(events => events
         .Close("resetProductGrid")       
       )
)
<button onclick="openWindow()" class="k-primary">Product Category Batch Update</button>



<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    var checkedIds = {};
  
    $(function () {
        $('#grid').on('click', '.checkbox', function () {
            var checked = $(this).is(':checked');
            var grid = $('#grid').data().kendoGrid;
            var row = $(this).closest("tr");
            var dataItem = grid.dataItem(row);
            checkedIds[dataItem.id] = checked;
            if (checked) {
                //-select the row
                row.addClass("k-state-selected");
            } else {
                //-remove selection
                row.removeClass("k-state-selected");
            }
        })
    })

    function openWindow() {
        var checkedRow = [];
        for (var i in checkedIds) {
            if (checkedIds[i]) {
                checkedRow.push(i);
            }
        }
        var wdw = $("#myWindow").data("kendoWindow"); //get the Window widget's instance  
        wdw.refresh({
            url: "../Home/PopupDataForm",
            type: "POST",
            data: { prodIds: checkedRow }
        });
        wdw.center();
        wdw.open();  //and call its open method
    }

    function resetProductGrid() {        
        $("#grid").data().kendoGrid.dataSource.read();
    }
</script>
